#ifndef GENERATE_RNA_FUSE
#define GENERATE_RNA_FUSE

#include "util.h"
#include <string>
#include <cstdint>
#include <unordered_map>
#include <htslib/tbx.h>
#include <htslib/faidx.h>
#include <htslib/kstring.h>

/** exon unit record in transcript */
struct UnitRec{
    int32_t cnt;  ///< exon count, 1 based
    int32_t len;  ///< exon length
    int32_t rbeg; ///< refrna beg coordinate
    int32_t rend; ///< refrna end coordinate
    int32_t gbeg; ///< genome beg coordinate
    int32_t gend; ///< genome end coordinate
};

/** class to store sequence got for each partner gene */
struct SeqInfo{
    std::string gene;   ///< gene name
    std::string trs;    ///< transcript name
    std::string strand; ///< transcript strand on genome
    int32_t exon;       ///< exon number in fusion(0 based)
    std::string seq;    ///< seqeunce in fusion
    std::string chr;    ///< chr of gene
    int32_t rend;       ///< refrna end coordinate
    int32_t rbeg;       ///< refrna beg coordinate
    int32_t dend;       ///< genome end coordinate
    int32_t dbeg;       ///< genome beg coordinate
    int32_t flklen;     ///< flank length got

    SeqInfo(){
        flklen = 0;
    }

    ~SeqInfo(){}
};

/** class to store fusion event */
struct FuseInfo{
    SeqInfo hseq; ///< hgene SeqInfo
    SeqInfo tseq; ///< tgene SeqInfo

    void outSeq(std::ostream& os){
        os << ">" <<  hseq.gene << "_E" << (hseq.exon + 1) << "_" << tseq.gene << "_E" << (tseq.exon + 1) << "\n";
        os << hseq.seq << tseq.seq << std::endl;
    }

    static void outInfoHead(std::ostream& os){
        os << "HGene\tHExon\tHTrs\tHGStrand\t";
        os << "TGene\tTExon\tTTrs\tTGStrand\t";
        os << "HLen\tTLen\tHFLen\tTFLen\t";
        os << "HRBeg\tHREnd\tTRBeg\tTREnd\t";
        os << "HGBeg\tHGEnd\tTGBeg\tTGEnd\t";
        os << "FuseSeq" << std::endl;
    }

    void outInfoRec(std::ostream& os){
        os << hseq.gene << "\t" << (hseq.exon + 1) << "\t" << hseq.trs << "\t" << hseq.strand << "\t";
        os << tseq.gene << "\t" << (tseq.exon + 1) << "\t" << tseq.trs << "\t" << tseq.strand << "\t";
        os << hseq.seq.length() << "\t" << tseq.seq.length() << "\t" << hseq.flklen << "\t" << tseq.flklen << "\t";
        os << hseq.rbeg << "\t" << hseq.rend << "\t" << tseq.rbeg << "\t" << tseq.rend << "\t";
        os << hseq.dbeg << "\t" << hseq.dend << "\t" << tseq.dbeg << "\t" << tseq.dend << "\t";
        os << hseq.seq << tseq.seq << std::endl;
    }
};

/** type to store gene to transcript map */
typedef std::unordered_map<std::string, std::string> Gene2TFMap;

/** class to generate pseudo fusion event */
class RSVGen{
    public:
        std::string incfg;    ///< input configure file(hgene hexon tgene texon)
        std::string g2tf;     ///< gene to trnascript database file
        std::string annrna;   ///< rna annotation database file generated by svtools
        std::string refrna;   ///< refseq of rna in annotation database
        std::string outfa;    ///< output fasta file of fusion sequence
        std::string outcfg;   ///< output detailed info of fusion sequence
        int32_t maxflk = 500; ///< max flank length around each catenated exon
        faidx_t* fai = NULL;  ///< refseq fa index file
        htsFile* tfp = NULL;  ///< rna annotation database file handle
        tbx_t* tbx = NULL;    ///< rna annotation database index file
        Gene2TFMap g2tm;      ///< gene to trnascript map

        RSVGen(){
            outfa = "fuseq.fa";
            outcfg = "fuseq.tsv";
        }

        ~RSVGen(){
            if(fai){
                fai_destroy(fai);
                fai = NULL;
            }
            if(tbx){
                tbx_destroy(tbx);
                tbx = NULL;
            }
            if(tfp){
                hts_close(tfp);
                tfp = NULL;
            }
        }

        void init(){
            fai = fai_load(refrna.c_str());
            tfp = hts_open(annrna.c_str(), "r");
            tbx = tbx_index_load(annrna.c_str());
            util::makeMapPairFromFileByLine(g2tf, g2tm);
        }

    public:
        void gensv();
        void gethseq(SeqInfo& si);
        void gettseq(SeqInfo& si);
        void getunit(SeqInfo& si, std::vector<UnitRec>& ur);
};

#endif
