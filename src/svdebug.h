#ifndef SVDEBUG_H
#define SVDEBUG_H

#include <map>
#include "util.h"
#include <string>
#include <sstream>
#include "bamutil.h"
#include <htslib/tbx.h>
#include <htslib/sam.h>


/** class to represent gene region on chrosome */
struct GeneRegion{
    std::string beg;    ///< beg pos
    std::string end;    ///< end pos
    std::string chr;    ///< chr name
    std::string strand; ///< strand

    /** operator to output an GeneRegion to ostream
     * @param os reference of ostream
     * @param reg reference of GeneRegion
     * @return ostream
     */
    inline friend std::ostream& operator<<(std::ostream& os, const GeneRegion& reg){
        os << reg.chr << ":" << reg.beg << "-" << reg.end;
        return os;
    }

    /** get string representation of GeneRegion
     * @return string representation of GeneRegion
     */
    std::string toString(){
        std::stringstream ss;
        ss << chr << ":" << beg << "-" << end;
        return ss.str();
    }
};

/** class to do sv calling debug */
struct SVDebug{
    std::string inbam;      ///< input bam to do debug work on
    std::string annodb;     ///< annotation database generated by svtools rnadb
    std::string gene2trans; ///< gene to transcript table generated by svtools rnadb
    std::string hgene;      ///< hgene name
    std::string tgene;      ///< tgene name
    std::string srbam;      ///< split read bam supporting hgene->tgene
    std::string dpbam;      ///< discordant pair bam supporting hgene->tgene
    std::string subam;      ///< single unmapped bam supporting hgene->tgene possibly
    std::string osbam;      ///< other split read bam
    std::string table;      ///< output tatistical information of all evidences
    bool rnamode;           ///< input bam is from rnaseq if true

    /** SVDebug constructor */
    SVDebug(){
        srbam = "sr.bam";
        dpbam = "dp.bam";
        subam = "su.bam";
        table = "stat.tsv";
        rnamode = false;
    }

    /** SVDebug destructor */
    ~SVDebug(){}

    /** debug dna sv */
    void debugDNA();
    
    /** debug rna sv */
    void debugRNA();

    /** get gene region on genome 
     * @param trs gene transcript name
     * @param tbx tabix of annotabion db
     * @param reg region object to store result
     */
    static void getReg(const std::string& trs, tbx_t* tbx, htsFile* tfp, GeneRegion& reg);
};
#endif
